{
  "name": "jfs",
  "version": "0.1.7",
  "main": "./lib/Store",
  "description": "A simple JSON file store",
  "author": {
    "name": "Markus Kohlhase",
    "email": "mail@markus-kohlhase.de"
  },
  "homepage": "http://github.com/flosse/json-file-store",
  "bugs": {
    "url": "http://github.com/flosse/json-file-store/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engine": "node",
  "dependencies": {
    "mkdirp": "~0.3.5",
    "node-uuid": "~1.4.1",
    "async": "~0.2.9",
    "clone": "~0.1.11"
  },
  "devDependencies": {
    "buster": "~0.7.8",
    "buster-coffee": "~0.1.4",
    "sinon": "~1.7.3",
    "coffee-script": "~1.6.3"
  },
  "repository": [
    {
      "type": "git",
      "url": "git://github.com/flosse/json-file-store.git"
    }
  ],
  "maintainers": [
    {
      "name": "Markus Kohlhase",
      "email": "mail@markus-kohlhase.de",
      "url": "http://github.com/flosse/"
    }
  ],
  "scripts": {
    "test": "buster-test --node"
  },
  "readme": "# JSON file store\n\nA simple JSON file store for node.js.\n\n[![Build Status](https://secure.travis-ci.org/flosse/json-file-store.png)](http://travis-ci.org/flosse/json-file-store)\n[![Dependency Status](https://gemnasium.com/flosse/json-file-store.png)](https://gemnasium.com/flosse/json-file-store)\n[![NPM version](https://badge.fury.io/js/jfs.png)](http://badge.fury.io/js/jfs)\n\nWARNING:\nDon't use it if you want to persist a large amount of objects.\nUse a real DB instead.\n\n## Install\n\n    npm install jfs --save\n\n## Usage\n\n```javascript\nvar Store = require(\"jfs\");\nvar db = new Store(\"data\");\n\nvar d = {\n  foo: \"bar\"\n};\n\n// save with custom ID\ndb.save(\"anId\", d, function(err){\n  // now the data is stored in the file data/anId.json\n});\n\n// save with generated ID\ndb.save(d, function(err, id){\n  // id is a unique ID\n});\n\n// save synchronously\nvar id = db.saveSync(\"anId\", d);\n\ndb.get(\"anId\", function(err, obj){\n  // obj = { foo: \"bar\" }\n})\n\n// pretty print file content\nvar prettyDB = new Store(\"data\",{pretty:true});\nvar id = prettyDB.saveSync({foo:{bar:\"baz\"}});\n// now the file content is formated in this way:\n{\n  \"foo\": {\n    \"bar\": \"baz\"\n  }\n}\n// instead of this:\n{\"foo\":{\"bar\":\"baz\"}}\n\n// get synchronously\nvar obj = db.getSync(\"anId\");\n\n// get all available objects\ndb.all(function(err, objs){\n  // objs is a map: ID => OBJECT\n});\n\n// get all synchronously\nvar objs = db.allSync()\n\n// delete by ID\ndb.delete(\"myId\", function(err){\n  // the file data/myId.json was removed\n});\n\n// delete synchronously\ndb.delete(\"myId\");\n```\n\n### Single file mode\n\nIf you want to store all objects in a single file, just set the `single` flag:\n\n```javascript\nvar db = new Store(\"data\",{single:true});\n```\n\nor point to a JSON file:\n\n```javascript\nvar db = new Store(\"./path/to/data.json\");\n```\n\n## License\n\nThis project is licensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "jfs@0.1.7",
  "dist": {
    "shasum": "1ee7ce30b0ebb14d44fe2e1b47e71b3e8941c220"
  },
  "_from": "jfs@",
  "_resolved": "https://registry.npmjs.org/jfs/-/jfs-0.1.7.tgz"
}
